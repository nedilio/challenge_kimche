{"version":3,"sources":["Data.js","App.js","serviceWorker.js","index.js"],"names":["GET_COUNTRIES","gql","Data","props","handleFilter","bind","groupBy","handleGroupByContinent","handleGroupByLanguage","state","countries","e","unfilteredCountries","this","languages","name","filter","currentTarget","value","toLowerCase","setState","pais","match","Set","map","country","continent","sort","groupByArray","console","log","className","type","onChange","disabled","onClick","length","item","key","code","emoji","capital","React","Component","Countries","useQuery","loading","error","data","client","ApolloClient","uri","App","role","aria-label","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4bd2b1fb.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport const GET_COUNTRIES = gql`\nquery countries {\n    countries {\n      code\n      name\n      emoji\n      continent {name}\n      languages {name}\n      capital\n    }\n  }\n  `;\n\n// Componente que carga los paises\nconst Countries = () => {\n  const { loading, error, data } = useQuery(GET_COUNTRIES);\n  if (loading) {\n    return <h1>Loading ...</h1>\n  } else if (error) {\n    return <h1>Error</h1>\n  }\n  // Paso el resultado como props al componente Data para poder definir estados y manipular estados dependiendo de los filtros.\n  return (\n    <Data countries={data.countries}/>\n  )\n}\n\nclass Data extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilter = this.handleFilter.bind(this);\n    this.groupBy = this.groupBy.bind(this);\n    this.handleGroupByContinent = this.handleGroupByContinent.bind(this);\n    this.handleGroupByLanguage = this.handleGroupByLanguage.bind(this);\n\n    // Estado inicial del componente, paises a mostrar y Agrupar por defecto por continente.\n    this.state = {\n      countries: [],\n      groupBy: 'Continent',\n    }\n  }\n\n  // Filtra por nombre de pais introducido en el input\n  handleFilter(e) {\n    const unfilteredCountries = this.props.countries;\n\n    // Caso especial de Antartica que no tiene idioma se asigna uno.\n    unfilteredCountries[8].languages[0] = {name: 'English'};\n\n    const filter = e.currentTarget.value.toLowerCase();\n    if (filter) {\n      this.setState(() => ({\n        countries: unfilteredCountries.filter((pais) => {\n          // Coincidencia exacta desde el inicio\n          return pais.name.toLowerCase().match('^'+filter)\n          \n          //Coincidencia parcial en cualquier lugar del string, mÃ¡s flexible.\n          // Ejemplo: si venezuela apareciera como Republica Bolivariana de Venezuela.\n          // return pais.name.toLowerCase().indexOf(filter)>-1\n        })\n      }))\n    } else {\n      this.setState(()=>({countries:[]}));\n    }\n  }\n\n  // Dependiendo del atributo para agrupar en el estado creamos un array con los diferentes items ya sea de continente o de idioma desde los paises ya filtrados\n  groupBy() {\n    const countries = this.state.countries;\n    if (this.state.groupBy === 'Continent') {\n      return [...new Set(countries.map(country => country.continent.name))].sort(); \n    } \n    else if (this.state.groupBy === 'Language') {\n// Para agrupar por idiomas decidi usar solo el primero en la lista ya que hay paises que tienen varios idiomas\n      return [...new Set(countries.map(country => country.languages[0].name))].sort(); \n    }\n  }\n// Cambia el atributo a agrupar ya sea a continente o idioma haciendo click\n  handleGroupByContinent() {\n    this.setState(() => ({groupBy:'Continent'}));\n    this.groupBy();\n  }\n  handleGroupByLanguage() {\n    this.setState(() => ({groupBy:'Language'}));\n    this.groupBy();\n  }\n  \n  render() {\n    const groupByArray = this.groupBy();\n    console.log('ejecutando render');\n    return (\n      <div>\n        <div className=\"filter-input\">\n          <input type=\"text\" onChange={this.handleFilter}/>\n        </div>\n        <div className=\"group-buttons\">\n          <button disabled={this.state.groupBy === 'Continent'} onClick={this.handleGroupByContinent}>Order by Continent</button>\n          <button disabled={this.state.groupBy === 'Language'} onClick={this.handleGroupByLanguage}>Order by Language</button>\n        </div>\n        <div className='countries'>\n          {this.state.countries.length>0 ? <h2>Countries by {this.state.groupBy}</h2> : <p>no hay paises</p> }\n          \n          {groupByArray.map((item)=> {\n            return(\n              <div key={item}>\n                <h3>{item}</h3>\n                { this.state.countries.map((country) => {\n                // Si agrupamos por continentes\n                  if (country.continent.name === item) {\n                    return (\n                      <div className=\"country\" key={country.code}>\n                        <h4> <span>{country.emoji}</span>{country.name}</h4> \n                        {country.capital && <p>Capital: {country.capital}</p>}\n                        \n                        <p>Language: {country.languages[0].name}</p>\n\n                      </div>\n                    )\n                  } \n                  // Agrupando por idioma\n                  else if (country.languages[0].name === item){\n                    return (\n                      <div className=\"country\" key={country.code}>\n                        <h4> <span>{country.emoji}</span>{country.name}</h4>\n                        <p>More info</p>\n\n                      </div>\n                    )\n                  }\n                })}\n\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Countries;","import React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Countries from \"./Data\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\",\n});\n\n    \nconst App = () => (\n  <ApolloProvider client={client}>\n    <div>\n      <h2>\n        Country Filter and Group{\" \"}\n        <span role=\"img\" aria-label=\"Rocket\">\n          ðŸš€\n        </span>\n      </h2>\n      <Countries />\n    </div>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}