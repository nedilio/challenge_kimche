{"version":3,"sources":["Country.js","FilterInput.js","GroupBy.js","Countries.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Country","props","console","log","country","className","key","code","role","aria-label","src","toLowerCase","alt","name","capital","languages","map","lang","FilterInput","type","onChange","handleFilter","placeholder","GroupBy","disabled","groupBy","onClick","handleGroupByContinent","handleGroupByLanguage","Countries","bind","state","countries","e","unfilteredCountries","this","filter","currentTarget","value","setState","pais","match","Set","continent","sort","groupByArray","length","item","React","Component","GET_COUNTRIES","gql","Data","useQuery","loading","error","data","client","ApolloClient","uri","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.584f14fc.chunk.js","sourcesContent":["import React from \"react\";\nimport './Country.css';\nimport { PinMapFill, ChatTextFill } from \"react-bootstrap-icons\";\n\nconst Country = (props) => {\n    console.log(props.country);\n    return(\n        <div className=\"country col-6 col-sm-6 col-md-4\" key={props.country.code}>\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <h4 className=\"card-title\"> <span className=\"flag\" role=\"img\" aria-label=\"Flag\"><img src={\"https://flagcdn.com/16x12/\"+props.country.code.toLowerCase()+\".png\"} alt={\"Flag\" + props.country.code} /></span>{props.country.name}</h4> \n                    {/* El emoji no se muestra en algunos navegadores, por eso decidi usar imagen desde una cdn */}\n\n                    {props.country.capital && <p className=\"card-text\"> <span><PinMapFill /></span> Capital: {props.country.capital}</p>}\n                    <p className=\"card-text\">Languages: </p>\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                    {props.country.languages.map((lang) => {\n                        return <li className=\"list-group-item\" key={lang.code}><span className=\"lang-icon\"><ChatTextFill/></span>{lang.name}</li>\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Country;","import React from \"react\";\nimport { Search } from 'react-bootstrap-icons';\n\n\nconst FilterInput = (props) => {\n    return (\n        <div className=\"filter-input input-group mb-3\">\n            <span className=\"input-group-text\"><Search /></span>\n            <input \n                type=\"text\" \n                className=\"form-control\"  \n                onChange={props.handleFilter}\n                placeholder=\"start typing to search...\"\n            />\n        </div>\n    )\n}\n\nexport default FilterInput;","import React from \"react\";\nimport './GroupBy.css';\n\nconst GroupBy = (props) => {\n    return (\n        <div className=\"group-buttons\">\n            <button className=\"btn btn-primary btn-group\" disabled={props.groupBy === 'Continent'} onClick={props.handleGroupByContinent}>Group by Continent</button>\n            <button className=\"btn btn-primary btn-group\" disabled={props.groupBy === 'Language'} onClick={props.handleGroupByLanguage}>Group by Language</button>\n          </div>\n    )\n}\n\nexport default GroupBy;","import React from \"react\";\nimport Country from './Country';\nimport FilterInput from \"./FilterInput\";\nimport GroupBy from \"./GroupBy\";\nimport { ArrowBarUp } from 'react-bootstrap-icons';\n\nimport './Countries.css';\n\nclass Countries extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleFilter = this.handleFilter.bind(this);\n      this.groupBy = this.groupBy.bind(this);\n      this.handleGroupByContinent = this.handleGroupByContinent.bind(this);\n      this.handleGroupByLanguage = this.handleGroupByLanguage.bind(this);\n  \n      // Estado inicial del componente, paises a mostrar y Agrupar por defecto por continente.\n      this.state = {\n        countries: [],\n        groupBy: 'Continent',\n      }\n    }\n  \n    // Filtra por nombre de pais introducido en el input\n    handleFilter(e) {\n      const unfilteredCountries = this.props.countries;\n  \n      const filter = e.currentTarget.value.toLowerCase();\n      if (filter) {\n        this.setState(() => ({\n          countries: unfilteredCountries.filter((pais) => {\n            // Coincidencia exacta desde el inicio\n            return pais.name.toLowerCase().match('^'+filter)\n            \n            //Coincidencia parcial en cualquier lugar del string, mÃ¡s flexible.\n            // Ejemplo: si venezuela apareciera como Republica Bolivariana de Venezuela.\n            // return pais.name.toLowerCase().indexOf(filter)>-1\n          })\n        }))\n      } else {\n        // Al borrar todas las letras del input limpia el state de paises filtrados\n        this.setState(()=>({countries:[]}));\n      }\n    }\n  \n    // Dependiendo del atributo para agrupar en el estado creamos un array con los diferentes items ya sea de continente o de idioma desde los paises ya filtrados\n    groupBy() {\n      const countries = this.state.countries;\n      if (this.state.groupBy === 'Continent') {\n        return [...new Set(countries.map(country => country.continent.name))].sort(); \n      } \n      else if (this.state.groupBy === 'Language') {\n  // Para agrupar por idiomas decidi usar solo el primero en la lista ya que hay paises que tienen varios idiomas\n        return [...new Set(countries.map(country => country.languages[0].name))].sort(); \n      }\n    }\n\n  // Cambia el atributo a agrupar ya sea a continente o idioma haciendo click\n    handleGroupByContinent() {\n      this.setState(() => ({groupBy:'Continent'}));\n      this.groupBy();\n    }\n    handleGroupByLanguage() {\n      this.setState(() => ({groupBy:'Language'}));\n      this.groupBy();\n    }\n    \n    render() {\n      const groupByArray = this.groupBy();\n      return (\n        <div>\n            <FilterInput handleFilter={this.handleFilter} />\n            <GroupBy \n                groupBy={this.state.groupBy}\n                handleGroupByLanguage={this.handleGroupByLanguage}\n                handleGroupByContinent={this.handleGroupByContinent}\n            />\n          <div className='countries'>\n            {this.state.countries.length>0 ? <h2>Showing countries by <strong>{this.state.groupBy}</strong></h2> : <p>Begin typing above to find countries <span><ArrowBarUp /></span></p> }\n            \n            {/* Iterar por elementos del filtro */}\n            {groupByArray.map((item)=> {\n              return(\n                <section key={item} className=\"wrapper\">\n                  <h3>{item}</h3>\n                    <div className=\"row\">\n                        {/* Filter para saber cuales paises cumplen con el item de agrupar y luego map para renderizar cada pais */}\n                        { this.state.countries.filter((country) => {\n                        return (country.continent.name === item || country.languages[0].name ===item)}).map((country) => {\n                            return <Country key={country.code} country={country}/>\n                        })\n                        }\n                    </div>\n                </section>\n              )\n            })}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  export default Countries;","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport Countries from './Countries';\n\nexport const GET_COUNTRIES = gql`\nquery countries {\n    countries {\n      code\n      name\n      emoji\n      emojiU\n      continent {name}\n      languages {\n        name\n        code\n      }\n      capital\n    }\n  }\n  `;\n\n// Componente que carga los paises\nconst Data = () => {\n  const { loading, error, data } = useQuery(GET_COUNTRIES);\n  if (loading) {\n    return <h2>Loading ...</h2>\n  } else if (error) {\n    return <h2>Error</h2>\n  }\n  \n  // Caso especial de Antartica que no tiene idioma se asigna uno.\n  data.countries[8].languages[0] = {name: 'English', code:'EN'};\n  \n  // Paso el resultado como props al componente Data para poder \n  // definir estados y manipular estados dependiendo de los filtros.\n  return (\n    <Countries countries={data.countries}/>\n  )\n}\n\nexport default Data;","import React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Data from \"./Data\";\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\",\n});\n\n    \nconst App = () => (\n  <ApolloProvider client={client}>\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>\n          Country Filter and Group\n        </h1>\n        <h2>By: Nelson Izquierdo</h2>\n        <p>Desarrollado en React, consiste en buscar paÃ­ses y mostrarlos agrupados por continente o Idioma</p>\n      </div>\n      <Data />\n    </div>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}